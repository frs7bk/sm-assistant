برومبت احترافي: خطة تطوير متكاملة للمساعد الذكي الموحد (الإصدار 2.0)
المهمة: تحويل النموذج الأولي لمشروع "المساعد الذكي الموحد" إلى تطبيق احترافي جاهز للإنتاج (Production-Grade)، مع التركيز على قوة البنية التحتية، جودة الكود، وتجربة المستخدم المتميزة.

المحور الأول: إعادة هيكلة وتطوير الواجهة الخلفية (Backend Refactoring & Development)

الانتقال إلى FastAPI بشكل كامل:

الهدف: توحيد الواجهة الخلفية باستخدام إطار عمل عصري، سريع، ومتوافق مع المعايير الحديثة.
المهام:
اعتماد FastAPI كنقطة الدخول الرئيسية للتطبيق.
استخدام Pydantic لتعريف نماذج (Schemas) للطلبات والاستجابات لضمان صحة البيانات وتوثيق الـ API تلقائيًا.
هيكلة المشروع في وحدات (Endpoints, Services, Models) لفصل الاهتمامات (Separation of Concerns).
تطوير نقطة نهاية WebSocket متقدمة:

الهدف: إنشاء اتصال آني ومستقر للمحادثات الصوتية.
المهام:
تصميم بروتوكول رسائل واضح (باستخدام JSON) بين الخادم والعميل للتحكم في حالة الجلسة (e.g., speech_start, speech_chunk, speech_end, error).
تكامل محركات تحويل الكلام إلى نص (STT) والنص إلى كلام (TTS) بشكل تدريجي (Streaming) لتقليل زمن الاستجابة.
إضافة معالجة قوية للأخطاء وحالات انقطاع الاتصال.
إدارة الإعدادات والبيئة:

الهدف: فصل الإعدادات عن الكود لزيادة الأمان وسهولة النشر.
المهام:
استخدام ملفات .env لتخزين المتغيرات الحساسة (مثل مفاتيح API) وروابط الخدمات.
إنشاء وحدة إعدادات مركزية (e.g., core/config.py) باستخدام Pydantic BaseSettings لقراءة هذه المتغيرات.
المحور الثاني: بناء واجهة أمامية عصرية (Modern Frontend Architecture)

اعتماد Next.js و TypeScript:

الهدف: بناء واجهة مستخدم سريعة، تفاعلية، وقوية من ناحية الأنواع (Type-Safe).
المهام:
إنشاء مشروع Next.js جديد.
استخدام TypeScript في جميع المكونات والخدمات لتقليل الأخطاء وتسهيل الصيانة.
هيكلة المشروع إلى pages, components, hooks, services, store, lib.
تطبيق إدارة حالة مركزية (Global State Management):

الهدف: توفير مصدر حقيقة واحد (Single Source of Truth) لحالة التطبيق.
المهام:
استخدام مكتبة Zustand لإنشاء مخزن (Store) مركزي.
إدارة كل الحالات المشتركة في المخزن، مثل:
حالة المساعد (idle, listening, processing, speaking, error).
سجل رسائل المحادثة.
النص الذي يتم التعرف عليه حاليًا.
إنشاء طبقة خدمة API معزولة:

الهدف: مركزية منطق الاتصال بالواجهة الخلفية.
المهام:
استخدام مكتبة Axios لإنشاء apiClient مع إعدادات أساسية (مثل baseURL).
إنشاء خدمات متخصصة (e.g., chatService, voiceService) تستخدم apiClient و WebSocket للتفاعل مع الخادم.
المحور الثالث: تحسين جودة الكود والصيانة (Code Quality & Maintainability)

تنظيف الكود المكرر وإعادة الهيكلة (Refactoring):

الهدف: إزالة الفوضى البرمجية وتحسين قابلية القراءة.
المهام:
مراجعة مجلد core و misc لدمج الملفات المتشابهة (مثل assistant_updated...) في كلاس واحد قوي (UnifiedAssistantEngine).
استخدام أداة cleanup_duplicates.py للمساعدة في تحديد التكرار ثم حذفه يدويًا.
إضافةชุด اختبارات شاملة (Comprehensive Test Suite):

الهدف: ضمان استقرار المشروع ومنع الأخطاء المستقبلية (Regressions).
المهام:
استخدام pytest كإطار عمل للاختبار.
كتابة اختبارات الوحدات (Unit Tests) لكل دالة وكلاس مهم في core و ai_models.
كتابة اختبارات التكامل (Integration Tests) للتحقق من أن الوحدات تعمل معًا بشكل صحيح.
تحسين التوثيق:

الهدف: جعل المشروع سهل الفهم للمطورين الحاليين والمستقبليين.
المهام:
كتابة توثيق داخلي (Docstrings) لكل الدوال والكلاسات، مع شرح وظيفتها، مدخلاتها، ومخرجاتها.
استخدام Type Hinting في كل مكان لزيادة وضوح الكود.
تحديث ملفات README.md لتشمل تعليمات إعداد وتشغيل مفصلة.
المحور الرابع: الارتقاء بتجربة المستخدم (User Experience Enhancement)

تصميم واجهات متخصصة ومصقولة:

الهدف: توفير تجربة مستخدم بديهية وجذابة بصريًا.
المهام:
تصميم وتنفيذ صفحة رئيسية مستوحاة من labs.google/flow مع تأثيرات حركية (Animations).
تصميم واجهة محادثة نصية بسيطة (Minimalist).
تصميم واجهة محادثة صوتية تفاعلية مع مؤثرات بصرية آنية.
تطوير المؤثرات البصرية المتقدمة للصوت:

الهدف: إعطاء المستخدم شعورًا بأن المساعد "حي" ويتفاعل معه.
المهام:
استخدام Web Audio API في المتصفح للوصول إلى بيانات التردد من الميكروفون.
استخدام <canvas> لرسم موجة صوتية (Waveform) أو أعمدة ترددية (Frequency Bars) تتغير بناءً على صوت المستخدم.
توفير تغذية راجعة فورية للمستخدم:

الهدف: إبقاء المستخدم على علم بحالة التطبيق.
المهام:
استخدام إشعارات (Toast Notifications) لعرض رسائل النجاح، الخطأ، أو المعلومات المهمة.
عرض مؤشرات تحميل وحالة واضحة في الواجهة (e.g., "جاري المعالجة...", "يتحدث المساعد...").